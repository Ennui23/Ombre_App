Sample Codes

Sample Codes for the Outfit Classification Model
class Classify : AppCompatActivity() {
    private lateinit var selectBtn: Button
    private lateinit var classifyBtn: Button
    private lateinit var imageView: ImageView
    private lateinit var bitmap: Bitmap
    private lateinit var labels: List<String>
    private val storageRef = FirebaseStorage.getInstance().reference

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.fragment_classify)
        labels = assets.open("labels.txt").bufferedReader().readLines()

        imageView = findViewById(R.id.imageView)
        selectBtn = findViewById(R.id.selectBtn)
        classifyBtn = findViewById(R.id.classifyBtn)

        val imageProcessor = ImageProcessor.Builder()
            .add(ResizeOp(64, 64, ResizeOp.ResizeMethod.BILINEAR))
            .build()

        selectBtn.setOnClickListener {
            val intent = Intent()
            intent.action = Intent.ACTION_GET_CONTENT
            intent.type = "image/*"
            startActivityForResult(intent, 100)
        }

        classifyBtn.setOnClickListener {
            if (::bitmap.isInitialized) {
                val progressDialog = ProgressDialog(this)
                progressDialog.setMessage("Classifying...")
                progressDialog.setCancelable(false)
                progressDialog.show()

                Handler().postDelayed({
                    var tensorImage = TensorImage(DataType.FLOAT32)
                    tensorImage.load(bitmap)
                    tensorImage = imageProcessor.process(tensorImage)

                    val model = OmbreCnn.newInstance(this)

                    val inputFeature0 = TensorBuffer.createFixedSize(intArrayOf(1, 64, 64, 3), DataType.FLOAT32)
                    inputFeature0.loadBuffer(tensorImage.buffer)

                    val outputs = model.process(inputFeature0)
                    val outputFeature0 = outputs.outputFeature0AsTensorBuffer.floatArray

                    var maxIdx = 0
                    outputFeature0.forEachIndexed { index, fl ->
                        if (outputFeature0[maxIdx] < fl) {
                            maxIdx = index
                        }
                    }

                    model.close()

Sample Codes for the Event Screen
class Event : AppCompatActivity(), View.OnClickListener {
    private var bizcolor: Int? = null
    private var adcolor: Int? = null
    private lateinit var adventure: TextView
    private lateinit var business: TextView
    private lateinit var adtext: TextView
    private lateinit var biztext: TextView
    private lateinit var viewPager2: ViewPager2

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.fragment_event)

        adventure = findViewById(R.id.adventure)
        business = findViewById(R.id.business)
        viewPager2 = findViewById(R.id.viewPager2)

        val adapter = FragmentPageAdapter(supportFragmentManager, lifecycle)
        viewPager2.adapter = adapter

        adventure.setOnClickListener(this)
        business.setOnClickListener(this)

        biztext = findViewById(R.id.business_textview)
        adtext = findViewById(R.id.adventure_textview)
        bizcolor = business.textColors.defaultColor
        adcolor = adventure.textColors.defaultColor

        adventure.performClick()

        val bottomNavigationView: BottomNavigationView = findViewById(R.id.bottomnavigation)

        bottomNavigationView.setOnNavigationItemSelectedListener { menuItem ->
            when (menuItem.itemId) {
                R.id.action_home -> {
                    val intent = Intent(this, Classify::class.java)
                    startActivityWithAnimation(intent, R.anim.swipe_right_enter, R.anim.swipe_right_exit)
                    finish()
                    true
                }
                R.id.action_event -> {
                    true
                }
                R.id.action_recommendation -> {
                    val intent = Intent(this, Recommendations::class.java)
                    startActivityWithAnimation(intent, R.anim.swipe_left_enter, R.anim.swipe_left_exit)
                    true
                }
                else -> false
            }
        }
    }

    override fun onClick(view: View) {
        if (view.id == R.id.adventure) {
            val size = adventure.width.toFloat()
            adtext.animate().x(size).duration = 150
            biztext.animate().x(0f).duration = 150
            biztext.setBackgroundColor(ContextCompat.getColor(this, R.color.default_tab))
            adventure.setTextColor(ContextCompat.getColor(this, R.color.adventure_red))
            business.setTextColor(bizcolor!!)
            viewPager2.setCurrentItem(0, true)
        } else if (view.id == R.id.business) {
            val size = adventure.width.toFloat()
            adtext.animate().x(0f).duration = 150
            biztext.animate().x(size).duration = 150
            biztext.setBackgroundColor(ContextCompat.getColor(this, R.color.default_tab))
            adventure.setTextColor(adcolor!!)
Sample Codes for the Recommendation Feature    

class Recommendations : AppCompatActivity() {

    private lateinit var firestore: FirebaseFirestore

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.fragment_recommendations)

        firestore = FirebaseFirestore.getInstance()

        val bottomNavigationView: BottomNavigationView = findViewById(R.id.bottomnavigation)

        bottomNavigationView.setOnNavigationItemSelectedListener { menuItem ->
            when (menuItem.itemId) {
                R.id.action_home -> {
                    val intent = Intent(this, Classify::class.java)
                    startActivityWithAnimation(intent, R.anim.swipe_right_enter, R.anim.swipe_right_exit)
                    finish()
                    true
                }
                R.id.action_event -> {
                    val intent = Intent(this, Event::class.java)
                    startActivityWithAnimation(intent, R.anim.swipe_right_enter, R.anim.swipe_right_exit)
                    true
                }
                R.id.action_recommendation -> {
                    true
                }
                else -> false
            }
        }
        val recyclerView: RecyclerView = findViewById(R.id.recoList_RecyclerView)
        val layoutManager = LinearLayoutManager(this)
        recyclerView.layoutManager = layoutManager
        
        fetchSavedImages { querySnapshot ->
            displaySavedImages(querySnapshot)
        }
    }

    private fun startActivityWithAnimation(intent: Intent, enterAnim: Int, exitAnim: Int) {
        startActivity(intent)
        overridePendingTransition(enterAnim, exitAnim)
    }

    private fun fetchSavedImages(onSuccess: (QuerySnapshot) -> Unit) {
        firestore.collection("Recommendation Saved Images")
            .get()
            .addOnSuccessListener { documents ->
                onSuccess(documents)
            }
            .addOnFailureListener {
            }
    }

    private fun displaySavedImages(querySnapshot: QuerySnapshot) {
        val recyclerView: RecyclerView = findViewById(R.id.recoList_RecyclerView)
        
        val adapter = RecommendationAdapter(this, querySnapshot)
        recyclerView.adapter = adapter

        val layoutManager = LinearLayoutManager(this, LinearLayoutManager.HORIZONTAL, false)
        recyclerView.layoutManager = layoutManager
        
        val spacingInPixels = resources.getDimensionPixelSize(R.dimen.spacing_between_items_linear)
        
Sample Codes for Recommendation Results

class ResultsRecommendation : AppCompatActivity() {

    private lateinit var selectedEvent: String
    private lateinit var selectedGender: String
    private lateinit var selectedType: String
    private lateinit var selectedColor: String
    private lateinit var selectedPattern: String
    private lateinit var storage: FirebaseStorage
    private lateinit var firestore: FirebaseFirestore

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.result_recommendation)

        FirebaseApp.initializeApp(this)

        selectedEvent = intent.getStringExtra("event") ?: ""
        selectedGender = intent.getStringExtra("gender") ?: ""
        selectedType = intent.getStringExtra("type") ?: ""
        selectedColor = intent.getStringExtra("color") ?: ""
        selectedPattern = intent.getStringExtra("pattern") ?: ""

        storage = FirebaseStorage.getInstance()
        firestore = FirebaseFirestore.getInstance()
        
        val recyclerView: RecyclerView = findViewById(R.id.recyclerView)
        val layoutManager = GridLayoutManager(this, 2)
        recyclerView.layoutManager = layoutManager
        
        val textTags: TextView = findViewById(R.id.textTags)
        
        queryRecommendations(selectedEvent, selectedGender, selectedType, selectedColor, selectedPattern) { documents ->
            displayRecommendations(documents)

            if (!documents.isEmpty) {
                val firstDocument = documents.documents[0]
                val event = firstDocument.getString("event") ?: ""
                val type = firstDocument.getString("type") ?: ""
                val color = firstDocument.getString("color") ?: ""
                val pattern = firstDocument.getString("pattern") ?: ""

                val tagsText = buildString {
                    if (event.isNotEmpty()) append("$event  ")
                    if (type.isNotEmpty()) append("$type  ")
                    if (color.isNotEmpty()) append("$color  ")
                    if (pattern.isNotEmpty()) append("$pattern ")
                }
                textTags.text = tagsText
            }
        }

Sample Codes for Build Gradle
plugins {
    id("com.android.application")
    id("org.jetbrains.kotlin.android")
    id("com.google.gms.google-services")
    kotlin("kapt")
}

android {
    namespace = "software_engineering.project.ombre"
    compileSdk = 34

    defaultConfig {
        applicationId = "software_engineering.project.ombre"
        minSdk = 26
        targetSdk = 31
        versionCode = 2
        versionName = "2"

        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            isMinifyEnabled = false
            proguardFiles(
                getDefaultProguardFile("proguard-android-optimize.txt"),
                "proguard-rules.pro"
            )
        }
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = "17"
    }
    buildFeatures {
        mlModelBinding = true
        viewBinding = true
    }
}

dependencies {
    implementation("androidx.core:core-ktx:1.12.0")
    implementation("androidx.appcompat:appcompat:1.6.1")
    implementation("com.google.android.material:material:1.10.0")
    implementation("androidx.constraintlayout:constraintlayout:2.1.4")
    implementation("org.tensorflow:tensorflow-lite-support:0.3.1")
    implementation("org.tensorflow:tensorflow-lite-metadata:0.1.0")
    implementation("com.google.firebase:firebase-firestore-ktx:24.9.1")
    implementation("com.google.firebase:firebase-storage-ktx:20.3.0")
 implementation("com.google.firebase:firebase-inappmessaging-ktx:20.4.0")
    testImplementation("junit:junit:4.13.2")
    androidTestImplementation("androidx.test.ext:junit:1.1.5")
    androidTestImplementation("androidx.test.espresso:espresso-core:3.5.1")
    testImplementation ("org.mockito:mockito-core:3.10.0")

    implementation(platform("com.google.firebase:firebase-bom:32.2.2"))
    implementation ("com.google.android.material:material:1.10.0")
    implementation ("com.github.bumptech.glide:glide:4.12.0")
    implementation ("com.firebaseui:firebase-ui-storage:8.0.0")
    implementation ("com.google.firebase:firebase-storage:20.3.0")
    implementation ("com.google.code.gson:gson:2.9.0")
    implementation ("com.firebaseui:firebase-ui-firestore:8.0.0")
    implementation ("com.firebaseui:firebase-ui-database:8.0.0")
    implementation ("com.squareup.picasso:picasso:2.71828")
    kapt ("com.github.bumptech.glide:compiler:4.12.0")
}


Sample Codes for the Model Results

@Suppress("DEPRECATION")
class ModelResults : AppCompatActivity() {

    private lateinit var binding: ActivityModelResultsBinding
    private lateinit var imageUrl: String

    private lateinit var resView: TextView
    private lateinit var imageView: ImageView
    private var resultImageUri: Uri? = null

    private val TAG = "ModelResults"

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityModelResultsBinding.inflate(layoutInflater)
        val view = binding.root
        setContentView(view)

        resView = view.findViewById(R.id.resView)
        imageView = view.findViewById(R.id.resultImage)

        imageUrl = intent.getStringExtra("imageUri") ?: ""
        val resultText = intent.getStringExtra("resultText") ?: ""

        binding.resView.text = resultText

        loadFirebaseImage(imageUrl)

        binding.save.setOnClickListener {
            saveResults(imageUrl, resultText)
        }

        binding.tryreco.setOnClickListener {
            navigateToChooseEventGenderActivity()
        }
        val bottomNavigationView: BottomNavigationView = findViewById(R.id.bottomnavigation)
        bottomNavigationView.setOnNavigationItemSelectedListener { menuItem ->
            when (menuItem.itemId) {
                R.id.action_home -> {
                    val intent = Intent(this, Classify::class.java)
                    startActivity(intent)
                    true
                }
                R.id.action_event -> {
                    val intent = Intent(this, Event::class.java)
                    startActivity(intent)
                    true
                }
                R.id.action_recommendation -> {
                    val intent = Intent(this, Recommendations::class.java)
                    startActivity(intent)
                    true
                }
                else -> false
            }
